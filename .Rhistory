makeCacheMatrix <- function(x = matrix()) {
inverse_matrix<-NULL
set<-function(mat_1i){
x<<-mat_1i
inverse_matrix<<-NULL
}
get<-function() x
set_inverse<-function(inv_mat) inverse_matrix<<-inv_mat
get_inverse<-function() inverse_matrix
list(set=set,get=get,set_inverse=set_inverse,get_inverse=get_inverse)
}
}
makeCacheMatrix <- function(x = matrix()) {
inverse_matrix<-NULL
set<-function(mat_1i){
x<<-mat_1i
inverse_matrix<<-NULL
}
get<-function() x
set_inverse<-function(inv_mat) inverse_matrix<<-inv_mat
get_inverse<-function() inverse_matrix
list(set=set,get=get,set_inverse=set_inverse,get_inverse=get_inverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse_matrix<-x$get_inverse()
if (!is.null(inverse_matrix)){
message("getting cached data")
return (inverse_matrix)
}
data_m<-x$get()
inverse_matrix<-solve(data_m)
x$set_inverse(inverse_matrix)
inverse_matrix
}
mm1<-makeCacheMatrix(matrix(1:4,2,2))
mm1$get()
cacheSolve(mm1)
mm1$get()%*%cacheSolve(mm1)
cacheSolve(mm1)
source("cachematrix.R")
jj1<-makeCacheMatrix(matrix(1:4,2,2))
jj1$get()
